<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一蓑烟雨任平生</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cocoyimasa.github.io/"/>
  <updated>2017-06-10T15:24:34.000Z</updated>
  <id>http://cocoyimasa.github.io/</id>
  
  <author>
    <name>Hesai Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UI框架项目重启</title>
    <link href="http://cocoyimasa.github.io/2017/06/10/UI%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E9%87%8D%E5%90%AF/"/>
    <id>http://cocoyimasa.github.io/2017/06/10/UI框架项目重启/</id>
    <published>2017-06-10T14:54:41.000Z</published>
    <updated>2017-06-10T15:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>UI框架项目重启。</p>
<p>下午的时候搭起了骨架。骨架基本思路是微型React，或者说是只要有个组件化模型就行。</p>
<p>我本来也没准备依赖任何库或者框架，所以基本代码是从零写起。本来想用个模块化库，看了看seajs实在没有想用的冲动，作罢。还是不想添加任何依赖，大不了以后代码全重构成ES6。</p>
<p>反正现在就这破样子，代码写的不是很好，但是也不想花精力重构。重构是个时间杀手，尤其对于独立开发者而言，重构是个无底洞，会严重拖慢代码节奏，打乱思路。这点在我之前写编译器时深有体会。我是个普通人，一步到位很难做到，当时却一心想要优化，无形中浪费了很多时间，亲身实践了“过早优化是万恶之源”，这句话也算是个真理。</p>
<p>因为实在懒得记CSS样式具体的条款，所以也是一边写一边查，也不觉得效率低多少，反而轻车上路十分舒适。</p>
<p>JS这门语言的动态性经常是会被忘记的，写习惯了C++、C#，转过来颇有些不适应。没找个C#工作也是遗憾，不过也知道C#工作也未必看得上我这微末的技能。现在这些面试，大多根本面不出面试者水平，平日里不写代码的人，各个找的工作比我强百倍，令我惊愕，却也释然，咱这表达能力不行，外表也容易被人轻视，难怪。我不太能感觉到一丝尊严，尤其是面试中被面试官各种鄙视令我十分不舒服。本是同行，相煎何太急啊。明明都是查文档就能搞定的事，非要认为是能力问题？如果是我反过来面试他们呢？他们能保证不错？我觉得我一样可以问的对方哑口无言。术业有专攻，何必因为一方面失误否定一个人？我曾经的代码热情随着嘈杂的社会环境和蹉跎的生活也被消磨的差不多了。混成这样也是惨，生活越发觉得枯燥和单调，无聊到天天自言自语。说不定日后会改行。</p>
<p>贴一小段今天的成果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line">window.onload=ui;</div><div class="line">    function ui()&#123;</div><div class="line">        var ui = UI();</div><div class="line">        function UI()&#123;</div><div class="line">            /*&#123;Control: ,tagName:div,attrs:&#123;&#125;,children&#125;*/</div><div class="line">            function createClass(jsonObject,children)&#123; /*just for extension*/</div><div class="line">                var el = document.createElement(jsonObject.tagName);</div><div class="line">                for(var attr in jsonObject.attrs)&#123;</div><div class="line">                    el.setAttibute(attr,jsonObject[attr]);</div><div class="line">                &#125;</div><div class="line">                if(children)&#123;</div><div class="line">                    el.appendChild(children);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            function render(el,root)&#123;</div><div class="line">                root.appendChild(el.renderDOM());</div><div class="line">            &#125;</div><div class="line">            function getFunctionNameString(funcStr)&#123;</div><div class="line">                var reg = /function\s*([a-zA-Z_$]*)/;</div><div class="line">                var matches = reg.exec(funcStr);</div><div class="line">                return matches[1];</div><div class="line">            &#125;</div><div class="line">            function inherit(child,parent)&#123;</div><div class="line">                var parentObj = eval(&apos;new &apos;+getFunctionNameString(parent.toString())+&apos;()&apos;);</div><div class="line">                child.prototype = parentObj;</div><div class="line">                child.prototype.constructor = child;</div><div class="line">            &#125;</div><div class="line">            return &#123;</div><div class="line">                createClass:createClass,</div><div class="line">                render:render,</div><div class="line">                inherit:inherit</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        /*utils start*/</div><div class="line">        function childrenStringGenerate(tagName,className,propValues)&#123;</div><div class="line">            var children = &quot;&quot;;</div><div class="line">            for(var i in propValues)&#123;</div><div class="line">                children += &apos;&lt;&apos;+tagName+&apos; class=&quot;&apos;+className+&apos;&quot;&gt;&apos;+</div><div class="line">                propValues[i]+&apos;&lt;/&apos;+tagName+&apos;&gt;&apos;;</div><div class="line">            &#125;</div><div class="line">            return children;</div><div class="line">        &#125;</div><div class="line">        /*utils end*/</div><div class="line">        function UIControl(props)&#123;</div><div class="line">            this.el = null;</div><div class="line">            this.state = &#123;&#125;; </div><div class="line">        &#125;</div><div class="line">        UIControl.prototype.init = function init()&#123;//用来设置state</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        UIControl.prototype.setState = function setState(state)&#123;//不允许子类覆盖</div><div class="line">            for(var st in state)&#123;</div><div class="line">                if(state.hasOwnProperty(st))&#123;</div><div class="line">                    this.state[st] = state[st];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            var preEl = this.el;</div><div class="line">            this.el = this.renderDOM();</div><div class="line">            if(this.onStateChange)&#123;</div><div class="line">                this.onStateChange(preEl,this.el);//更新控件</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        UIControl.prototype.createDOMFromString = function createDOMFromString(htmlString)&#123;</div><div class="line">            var div = document.createElement(&apos;div&apos;);</div><div class="line">            div.innerHTML = htmlString;</div><div class="line">            return div;</div><div class="line">        &#125;</div><div class="line">        UIControl.prototype.renderDOM = function()&#123;</div><div class="line">            this.el = this.createDOMFromString(this.render());</div><div class="line">            return this.el;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        function UIMenu()&#123;</div><div class="line">            this.style = &#123;</div><div class="line">                menu:&apos;ui-menu&apos;,</div><div class="line">                menuItem:&apos;ui-menu-item&apos;,</div><div class="line">                clearFix:&apos;ui-clear-fix&apos;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        ui.inherit(UIMenu,UIControl);</div><div class="line">        //[] =&gt; String</div><div class="line">        UIMenu.prototype.setChildren = function setChildren(children)&#123;</div><div class="line">            this.children = &quot;&quot;;</div><div class="line">            for(var i in children)&#123;//注意for..in i是index 需要使用children[i]</div><div class="line">                this.children += &apos;&lt;li class=&quot;&apos;+this.style[&apos;menuItem&apos;]+&apos;&quot;&gt;&apos;+</div><div class="line">                children[i].render()+&apos;&lt;/li&gt;&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //&#123;&#125; =&gt; Void</div><div class="line">        UIMenu.prototype.setCSS = function setCSS(cssObj)&#123;</div><div class="line">            for(var key in cssObj)&#123;</div><div class="line">                this.style[key] = cssObj[key];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //Void =&gt; String</div><div class="line">        UIMenu.prototype.render = function render()&#123;</div><div class="line">            return &apos;&lt;a&gt;&lt;ul class=&quot;&apos;+this.style[&apos;menu&apos;]+&apos;&quot;&gt;&apos;+</div><div class="line">            this.children+</div><div class="line">            &apos;&lt;div class=&quot;&apos;+this.style[&apos;clearFix&apos;]+&apos;&quot;&gt;&lt;/div&gt;&apos;+</div><div class="line">            &apos;&lt;/ul&gt;&lt;/a&gt;&apos;;</div><div class="line">        &#125;</div><div class="line">        function UIMenuItem(props)&#123;</div><div class="line">            this.props = props;</div><div class="line">            this.render = function()&#123;</div><div class="line">                return &quot;&lt;button&gt;&quot;+this.props.value+&quot;&lt;/button&gt;&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ui.inherit(UIMenuItem,UIControl);</div><div class="line"></div><div class="line">        function UIMenuItemSelectOption(props)&#123;</div><div class="line">            this.props = props;</div><div class="line">            this.render = function()&#123;</div><div class="line">                var options = childrenStringGenerate(&apos;option&apos;,&apos;&apos;,this.prop.value);</div><div class="line">                return &apos;&lt;select&gt;&apos;+options+&apos;&lt;/select&gt;&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        function UIDropdown(props)&#123;</div><div class="line">            this.props = props;</div><div class="line">            this.style = &#123;</div><div class="line">                dropdownContainer:&apos;ui-dropdown-container&apos;,</div><div class="line">                dropdown:&apos;ui-dropdown&apos;,</div><div class="line">                dropdownList:&apos;ui-dropdown-list&apos;,</div><div class="line">                dropdownItem:&apos;ui-dropdown-item&apos;</div><div class="line">            &#125;</div><div class="line">            setTimeout(this.onClick.bind(this),0);</div><div class="line">        &#125;</div><div class="line">        ui.inherit(UIDropdown,UIControl);</div><div class="line">        UIDropdown.prototype.onClick = function()&#123;</div><div class="line">            var dropdownControl = document.getElementsByClassName(this.style[&apos;dropdown&apos;])[0];</div><div class="line">            var that = this;//</div><div class="line">            dropdownControl.addEventListener(&apos;click&apos;,function(event)&#123;</div><div class="line">                var items = document.getElementsByClassName(that.style[&apos;dropdownList&apos;])[0];</div><div class="line">                if(items.style.display == &apos;none&apos;)&#123;</div><div class="line">                    items.style.display = &apos;block&apos;;</div><div class="line">                &#125;</div><div class="line">                else&#123;</div><div class="line">                    items.style.display = &apos;none&apos;;</div><div class="line">                &#125;</div><div class="line">            &#125;,false);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        UIDropdown.prototype.render = function()&#123;</div><div class="line">            var children = childrenStringGenerate(&apos;div&apos;,this.style[&apos;dropdownItem&apos;],this.prop.value);</div><div class="line">            return &apos;&lt;div class=&quot;&apos;+this.style[&apos;dropdownContainer&apos;]+&apos;&quot;&gt;&lt;div class=&quot;&apos;+this.style[&apos;dropdown&apos;]+&apos;&quot;&gt;&lt;/div&gt;&apos;+</div><div class="line">            &apos;&lt;div class=&quot;&apos;+this.style[&apos;dropdownList&apos;]+&apos;&quot;&gt;&apos;+children+</div><div class="line">            &apos;&lt;/div&gt;&apos;+</div><div class="line">            &apos;&lt;/div&gt;&apos;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        function UIScroll(props)&#123;</div><div class="line">            this.style = &#123;</div><div class="line">                scroll:&apos;ui-scroll&apos;,</div><div class="line">                scrollItem:&apos;ui-scroll-item&apos;</div><div class="line">            &#125;</div><div class="line">            this.props = props;</div><div class="line">        &#125;</div><div class="line">        UIScroll.prototype.render = function()&#123;</div><div class="line">            var children = childrenStringGenerate(&apos;img&apos;,this.style[&apos;scrollItem&apos;],this.prop.value);</div><div class="line">            return &apos;&lt;div class=&quot;&apos;+this.style[&apos;scroll&apos;]+&apos;&quot;&gt;&apos;+children+&apos;&lt;/div&gt;&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var menu = new UIMenu();</div><div class="line">        menu.setChildren([</div><div class="line">            new UIMenuItem(&#123;value:&quot;Test1&quot;&#125;),</div><div class="line">            new UIMenuItemSelectOption(&#123;value:[&quot;Test1 Test1 Test1&quot;,&quot;Test2&quot;]&#125;),</div><div class="line">            new UIDropdown(&#123;value:[&quot;Test1 Test1 Test1&quot;,&quot;Test2&quot;]&#125;)</div><div class="line">        ]);</div><div class="line">        ui.render(menu,document.getElementById(&apos;root&apos;));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UI框架项目重启。&lt;/p&gt;
&lt;p&gt;下午的时候搭起了骨架。骨架基本思路是微型React，或者说是只要有个组件化模型就行。&lt;/p&gt;
&lt;p&gt;我本来也没准备依赖任何库或者框架，所以基本代码是从零写起。本来想用个模块化库，看了看seajs实在没有想用的冲动，作罢。还是不想添加任何依赖
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（一）</title>
    <link href="http://cocoyimasa.github.io/2017/05/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://cocoyimasa.github.io/2017/05/24/Vue学习笔记（一）/</id>
    <published>2017-05-24T14:25:32.000Z</published>
    <updated>2017-05-24T15:26:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本系列之缘起"><a href="#本系列之缘起" class="headerlink" title="本系列之缘起"></a>本系列之缘起</h1><p>前段时间决定做一件事：每天写一个实例，积少成多就是一个项目。从今天开始实践。</p>
<p>选定的实践目标为 ： 学会Vue，并构建中型项目。</p>
<p>这是本系列的第一篇。我不能保证会有第50篇。但是10篇总是会有的。</p>
<h1 id="配置Vue开发环境"><a href="#配置Vue开发环境" class="headerlink" title="配置Vue开发环境"></a>配置Vue开发环境</h1><p>首先安装Vue。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install vue-cli -g</div></pre></td></tr></table></figure>
<p>如果觉得每次输入sudo浪费时间，可以给全局的node模块提权：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod -R 777 /usr/local/lib/node_modules/</div></pre></td></tr></table></figure>
<p>安装完成之后，就可以用vue-cli创建Vue应用了。创建完成后使用npm run dev启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack project-name</div><div class="line"></div><div class="line">$ cd project-name</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>之后访问浏览器的<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 可以看到Vue的欢迎界面，说明环境配置成功。</p>
<h1 id="完成第一个组件的编写"><a href="#完成第一个组件的编写" class="headerlink" title="完成第一个组件的编写"></a>完成第一个组件的编写</h1><p>观察src目录</p>
<p><img src="/images/src.png" alt="src目录"></p>
<p>可以发现vue生成的文件，components下有Hello.vue,我们可以依样画葫芦，写一个Me.vue<br>内容基本是复制粘贴，最终修改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">&lt;div class=&quot;me&quot;&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;me&apos;,</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      msg: &apos;Hello World&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>接下来有两种选择可以把我们刚写的Me.vue显示出来。</p>
<ul>
<li>1.配置到router目录下的index.js中，只需要引入Me.vue，并在routes中添加一个Me组件即可。此时<br>访问<a href="http://localhost:8080/#/Me" target="_blank" rel="external">http://localhost:8080/#/Me</a> 即可看到新加的页面。</li>
</ul>
<p>index.js中新加的内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import Me from &apos;@/components/Me&apos; //add</div><div class="line">export default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      name: &apos;Hello&apos;,</div><div class="line">      component: Hello</div><div class="line">    &#125;,</div><div class="line">    &#123;//add</div><div class="line">      path: &apos;/Me&apos;,</div><div class="line">      name: &apos;My&apos;,</div><div class="line">      component: Me</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>2.把Me.vue添加到Hello.vue中<br>修改Hello.vue的script中内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import Me from &apos;@/components/Me.vue&apos;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;hello&apos;,</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      msg: &apos;Welcome to Your Vue.js App&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  components: &#123; Me &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总的来说就是引入Me.vue，并添加一个字段components，内容为Me。<br>完成之后的效果如下：<br><img src="/images/show.png" alt="展示"></p>
<p>至此，完成了新加一个component的任务。</p>
<h1 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h1><p>先说个题外话，eslint太烦人了，检查太严格，连多了个空格都要报错，对于我这种需要快速写代码检验效果的人简直是折磨，<br>果断禁掉。我承认eslint有好处，但是这里为了快速写代码，必须禁掉。<br>方法：<br>在eslintignore中添加src/*,这样src下任何文件都不会被eslint检查。<br>如果是团队里写代码，最好还是把eslint打开，这样保证团队代码风格尽量一致。</p>
<p>之后我们可以加载数据了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-resource --save</div></pre></td></tr></table></figure>
<p>在Me.vue的data下面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mounted: function() &#123;</div><div class="line">    this.$http.jsonp(&apos;&apos;, &#123;&#125;, &#123;</div><div class="line">        headers: &#123;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        emulateJSON: true</div><div class="line">    &#125;).then(function(response) &#123;</div><div class="line">    &#125;, function(response) &#123;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样即可异步加载外部网站的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本系列之缘起&quot;&gt;&lt;a href=&quot;#本系列之缘起&quot; class=&quot;headerlink&quot; title=&quot;本系列之缘起&quot;&gt;&lt;/a&gt;本系列之缘起&lt;/h1&gt;&lt;p&gt;前段时间决定做一件事：每天写一个实例，积少成多就是一个项目。从今天开始实践。&lt;/p&gt;
&lt;p&gt;选定的实践目标为
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>仔细一想，似乎没写过什么好文章</title>
    <link href="http://cocoyimasa.github.io/2017/05/22/%E4%BB%94%E7%BB%86%E4%B8%80%E6%83%B3%EF%BC%8C%E4%BC%BC%E4%B9%8E%E6%B2%A1%E5%86%99%E8%BF%87%E4%BB%80%E4%B9%88%E5%A5%BD%E6%96%87%E7%AB%A0/"/>
    <id>http://cocoyimasa.github.io/2017/05/22/仔细一想，似乎没写过什么好文章/</id>
    <published>2017-05-21T17:00:13.000Z</published>
    <updated>2017-05-21T17:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>仔细一想，似乎没写过什么好文章。</p>
<p>本来想把原来博客里的文章迁移过来，想想还是算了，写的不是很好，对人没什么启发。</p>
<p>以后还是专注于写好文章，至少要深思熟虑才要发过来。</p>
<p>烂文章写在简书的博客里烂掉好了。反正那里只有我自己知道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仔细一想，似乎没写过什么好文章。&lt;/p&gt;
&lt;p&gt;本来想把原来博客里的文章迁移过来，想想还是算了，写的不是很好，对人没什么启发。&lt;/p&gt;
&lt;p&gt;以后还是专注于写好文章，至少要深思熟虑才要发过来。&lt;/p&gt;
&lt;p&gt;烂文章写在简书的博客里烂掉好了。反正那里只有我自己知道。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客测试</title>
    <link href="http://cocoyimasa.github.io/2017/05/21/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"/>
    <id>http://cocoyimasa.github.io/2017/05/21/博客测试/</id>
    <published>2017-05-21T15:54:18.000Z</published>
    <updated>2017-05-21T16:08:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jekyll是个坑"><a href="#Jekyll是个坑" class="headerlink" title="Jekyll是个坑"></a>Jekyll是个坑</h1><p>最终选定了博客生成系统Hexo，之前用的Jekyll，各种各样的问题烦死人，换个非官方主题报的错根本不是人能看懂的。<br>总之jekyll的体验就一个字：坑。</p>
<h1 id="Hexo的优势"><a href="#Hexo的优势" class="headerlink" title="Hexo的优势"></a>Hexo的优势</h1><p>选了Hexo才发现它流行是有原因的，首先简单易用，部署到github只需一个命令，其次主题随意换，只需要下载主题，在config中配置即可。其三，Jekyll的优点它全有。</p>
<h1 id="这其实只是一篇测试文章"><a href="#这其实只是一篇测试文章" class="headerlink" title="这其实只是一篇测试文章"></a>这其实只是一篇测试文章</h1><p>测试证明，Hexo真好用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Jekyll是个坑&quot;&gt;&lt;a href=&quot;#Jekyll是个坑&quot; class=&quot;headerlink&quot; title=&quot;Jekyll是个坑&quot;&gt;&lt;/a&gt;Jekyll是个坑&lt;/h1&gt;&lt;p&gt;最终选定了博客生成系统Hexo，之前用的Jekyll，各种各样的问题烦死人，换个非官
    
    </summary>
    
    
  </entry>
  
</feed>
